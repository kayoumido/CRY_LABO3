from Crypto.Util.number import long_to_bytes, bytes_to_long 
from math import sqrt



def keyGen():
    p = random_prime(2^1024)
    q = random_prime(2^1024)
    return ((p, q), p*q)


def encrypt(m, n):
    m += b'\x00'*50
    m = bytes_to_long(m)
    return (m^2 % n)


def decrypt(c, key):
    (p, q), _ = key

    P = Integers(p)
    Q = Integers(q)

    cp = P(c)
    cq = Q(c)

    cps = cp.sqrt(all=True)
    cqs = cq.sqrt(all=True)
    for cpp in cps:
        for cqq in cqs:
            r = long_to_bytes(crt([cpp.lift(), cqq.lift()], [p, q]))

            # since we do not know wich root contains the decrypted message,
            # we need to check the last 50 bytes for the redundancy we added 
            # when encrypting           
            if r[-50:] == b'\x00'*50:
                return r[:-50]


def break_the_world(to_break, n, roots):
    possible_ms = []
    for two_cq in [roots[0] - roots[1], roots[0] - roots[2], roots[0] - roots[3]]:
        p_or_q = gcd(n, two_cq)
        the_other_one = n/p_or_q

        if not the_other_one == n:
            possible_ms.append(decrypt(to_break, ((p_or_q, the_other_one), 0)))

    # Out of the three `2*cq` we're testing, only one doesn't output the message.
    # So we know that our list contains the message twice, hence the possible_ms[0]
    return possible_ms[0]


def main():
    
    # m = b"We've known each other for so long.\n    Your heart's been aching but you're too shy to say it.\n    Inside we both know what's been going on."

    # key = keyGen()
    # (p, q), n = key

    # # print("{}\n\n\n\n".format(key))
    # c = encrypt(m, key[1])

    # print(decrypt(c, key))


    n2 = 4466042025582931121580533492690141146694965878276082020295089307322194614567695879260782060473754545168455280410955131310903786088090203412614938855822964203284908396503695350818660762094062128901785877867971419422375387453599597282463777190119690854587736553140283686518018714348507362924786231846605212464908602317295283746178434902669175220935115240082102785025768827041300669290312372666216475398146250819153382155616108659163252835285680265579616928468740520881617316371520331406162963016099499655654602568769661467913779417766556325467486495779500805530552001609857830465108018742398618111065663938153837163309
    m2 = b"We've known each other for so long.\n    Your heart's been aching but you're too shy to say it.\n    Inside we both know what's been going on."
    c2 = 3860050547829213547398751658383151689351052119559073053179841143462758299415019687107448539685698906672967765556408811898847552282239203761957987227957514834170678606343620992735278710401665449375495203912213582367118735921671545153768758752299585316345085108558724068836190963361510646839897862301155522963296235030533018016091886535780953820943373062364043318186824122287690544717791386207957277085881255228041823521777811800242826875103333507208029615594157498538199630614251546548735928919728967135716265567439419798500492164074803910835791245034772325057997163794806942083017401113325114874309608586987213133167
    roots2 = [4466042025582931121580533492690141146694965878276082020295089307322194614567695879260782060473754545168455280410955131310903786088090203412614938855822964203272352703349024246690813436742748355402091460558902281752085917838843811108206155760601978168463572376903872705322744787822014544109728364002956680275564217966041893946971666941839767829889053970693177056399337259617083633745850529136960029940207571332667309035025439833175805518163816249848190654225232122329243847187391857148270783843562809341083361452357924238990440951646164212464891647394358488726066972031294028645102420953101222691145462116638834750253, 1147401248218923039476869688675307667831041339690849805955230137004399706666975337532454374916560883909218537048557576909437501861927069687926783467655812080517401918425052044865669677966859954978975508124244960403783780022135178146854727302258229801698217110119726395780687647219115380323730100135433860117881102205238112054202371272980318972081129677870095524158225274735314458058942051864639614386124554778990738322470408340843856335490466257608787486907464655547578092896028471985580639843231971863486325324595271150654408971026302588241688520457012750575382834495828334502410218618910348864521322231437816514624, 3318640777364008082103663804014833478863924538585232214339859170317794907900720541728327685557193661259236743362397554401466284226163133724688155388167152122767506478078643305952991084127202173922810369743726459018591607431464419135609049887861461052889519443020557290737331067129391982601056131711171352347027500112057171691976063629688856248853985562212007260867543552305986211231370320801576861012021696040162643833145700318319396499795214007970829441561275865334039223475491859420582323172867527792168277244174390317259370446740253737225797975322488054955169167114029495962697800123488269246544341706716020648685, 12555693154671104127847325351313773499694417309069137670289469614755786174257621429517712686124164176236410981195273926526492818815057867843648532189344384351253389799206767960829407391046061269388925728626431567424217035544461843529256445457938679486486073120590668825987447317121864015731426274243508398552373469184128474257892179172536690314571241116411737228923338466120392113002594848385142316804485029578563801820005597789297395419920201821515002413056]
    chall2 = 3106516289994830542478443734408113574342832587619276008790109182127732633213088260800310865658174306590322153580788295455417980653421076040873612079215187176002692144508685071464525319898591117472346419338828020602784534848840001116323286728615135533692867625809906355400716511659501756458562976287059323188639683061207086528759979118826206618613588026864780035936201514511246599025356444502140644849106214623383105018706889685608922977912027321394127487632757262826929421817508628687636871429524903600303659197684749810670256015462690325367778391505848367995689616509042013068059728811094950073591831638913186007676

    m = break_the_world(chall2, n2, roots2)
    print(m)

if __name__ == '__main__':
    main()
