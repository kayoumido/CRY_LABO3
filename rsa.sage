from Crypto.Util.number import long_to_bytes, bytes_to_long 
from math import sqrt 

def print_cracked(solution, m):
    print("Cracking my friends {} solution".format(solution))
    print("{}\n".format(long_to_bytes(m)))

def crack_one():

    e = 65537
    n = 169239205144977751235624357746925211069365103779001176199600241780528663383783948723530370581516816582471929077262746968395797640517758693748061931364646119575043532162653197763205385025594864802488420117265236600080368314744333270658410888625588886017979832106911095035197688208015778061760785170136535495208364260388978916822334661420099366771190680192743605425000694092578065129405064687562157706544284824084243596587472078155932909591594571557391493611600762710396039572698143343758552737234506430219905918866451654496131410092383209136792347582338735201035482640486556430590775705407641577437282708810400332043966544243830922739321116395797288959526194339917642575412647339288271620374277028633029529445355908874660210915722808312243497023796331660117686278964469628867990219041681224445191211576356362428636389763624226859733785148376658171590960293003651852197574642917941936687667341369668578681969958027333364789289168901649571981175319876814454225100011440500189215516786389666182394868311111894563406240292898172897188716680763573200648626531342208711875858112176639106756688102795990505048394325689678596634371236645189119310742955934009737919063328234090358819239383629071044303781276756637093182899184397704181480081
    c = 30681508770360310551003781756496827577015313161897615999389109450754669584259273728296566858657847784113376134464545150189632055346929227994943048833990469475671193343134008374797057262174963062712695538917100581698369708659785155774417321248645251971899791262045151988665206429179804510912017927953150587691437568970753943592508299329168576727221232850558872314857978071559308979317966362655607540827051231570262064594111714466710496119673435432781242612021547861900123734287868383846257763671082375256526675434879124602790737559712772299084412821741261809590617863161434139562566691773499706390714950983906673909311407495231573571836169408531770961484735101290191200589841689048502719658154459131145441618491056607033383606634699615375743321836252871839353731280515976576848751839776290350506992517182321316856691856322704343138193502542822946464319839483622310402284944997613025623992164569287235328237397640578256957745275415949868513699712689281379018018073239763107619120850024537836610399369423731795014830189785135308716857124698955107340427344571774392739456564433641482656362815323417312419611396654440751566911465944811737295283881750945615998788426394253929435701281989745138862626847860933908819755966088985292250527

    p = n.nth_root(4)
    phi_n = (p-1) * (p**3)
    d = inverse_mod(e, phi_n)
    m = power_mod(c, d, n)

    print_cracked("first", m)

def crack_two():
    # chosen primes are waaaaaaaaay too small
    def keygen2():
        phi = 65537
        e = 65537
        num_primes = 10
        n = 1
        while gcd(phi, e) != 1:
            n = 1
            phi = 1
            for i in range(num_primes):
                p = random_prime(2**60)
                n *= p
                phi *= (p-1)

        return (e, n, inverse_mod(e, phi)) #e, n, d

    
    e = 65537
    n = 616058630791798325454458818608802704479082748730469404659312950107358860071706946779002062366124571004535050053062040123111219346364126800682707780655803254184634448162130108439
    c = 110707993740663276846456219874542339042164055547151325585045531371112687195108460445156798113824276900350470222104532604513389524028513957424465453192170229458523990298059931504

    phi = euler_phi(n)
    d = inverse_mod(e, phi)
    m = power_mod(c, d, n)

    print_cracked("second", m)


def crack_three():
    def nearest_square(n):
        return ceil(n.sqrt())

    e = 65537
    n = 7836415965076224925221668738838441834575828655997976163221550082425852312825148703643338967162821108513827631906346576425074140472579114046035170368866912489368681993754471399452400483773048149898663780342727703347904099818137966450256249721286336871815294253327406484276146917398789564353428062145990147293353033492334034387757668492293361602037589178034703625448955414699549322929859208622958829090662364787867839335218513200904423011697541646336394034518619411308853983384137823360905004964723630925196005933967634668320439365253613041314548102458940409490662773294304334027198542265795794525233248327262579079424639220765466529
    c = 4927602352442767238292268348518557038269122092635936457444563985784465205223993137286738751411433469143247760607379279123244058092017815201976913748770475484808762144087448634875651352114636088283578590411007210684424392886165597592265318559279146991724209018179137927505382884496994101852423911455585126153737364846299798341112864242518272438750273869844195908279672379952536854468080353448793271288982668060097087512316330429279163016494390034723872299438909436977265993000022046690725977126712078209120511535155012909844940700576727864025649317761914518359913585211236334599076621904446332728476704958198178128036427305045301276

    a = nearest_square(n)
    s = a**2 - n
    b = s.sqrt()

    p = a + b
    q = a - b

    phi = (p - 1) * (q - 1)

    d = inverse_mod(e, phi)
    m = power_mod(c, d, n)

    print_cracked("third", m)


def main():
    crack_one()
    crack_two()
    crack_three()


if __name__ == '__main__':
    main()